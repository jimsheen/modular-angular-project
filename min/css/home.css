/**
 *
 * Mixins
 *
 */
/**
 *
 * Mixins Defaults
 *
 */
/* white space fix cross browser */
/* body a {
    @include whiteSpace
}

*/
/* Linear gradient */
/* Box shadow */
/* flex flow */
/**
 *
 * Extends
 * - Some extends use mixins so import after
 *
 */
/**
 *
 * Extends Defaults
 *
 */
.btn {
  display: inline-block;
  margin-bottom: 0;
  font-size: 16px;
  line-height: 1.42857143;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  background-image: none;
  padding: 10px 20px;
  border: none;
  text-decoration: none;
  color: white;
  border-radius: 5px;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2) ;
}

.btn:focus {
  outline: 0;
}

.slider {
  background: blue;
}

#main {
  background: red;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
